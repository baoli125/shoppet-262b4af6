import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { messages, isNewUser } = await req.json();
    const LOVABLE_API_KEY = Deno.env.get("LOVABLE_API_KEY");
    
    if (!LOVABLE_API_KEY) {
      console.error("LOVABLE_API_KEY is not configured");
      throw new Error("AI service not configured");
    }

    console.log("Calling Lovable AI with", messages.length, "messages");

    const systemPrompt = isNewUser 
      ? `B·∫°n l√† "Tay Nh·ªè" - tr·ª£ l√Ω ·∫£o th√¢n thi·ªán c·ªßa Shoppet. Nhi·ªám v·ª• c·ªßa b·∫°n l√† h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng m·ªõi kh√°m ph√° website m·ªôt c√°ch chi ti·∫øt v√† th√¢n thi·ªán.

Shoppet c√≥ c√°c t√≠nh nƒÉng ch√≠nh:
1. **AI Chat** (/ai-chat): Tr·ª£ l√Ω AI t∆∞ v·∫•n s·ª©c kh·ªèe, dinh d∆∞·ª°ng th√∫ c∆∞ng 24/7
2. **H·ªì s∆° th√∫ c∆∞ng** (/pets): Qu·∫£n l√Ω th√¥ng tin th√∫ c∆∞ng (t√™n, gi·ªëng, tu·ªïi, c√¢n n·∫∑ng, h·ªì s∆° ti√™m ch·ªßng)
3. **Marketplace** (/marketplace): Mua s·∫Øm s·∫£n ph·∫©m cho th√∫ c∆∞ng (th·ª©c ƒÉn, ƒë·ªì ch∆°i, ph·ª• ki·ªán, d·ªãch v·ª•)
4. **Gi·ªè h√†ng** (/cart): Xem v√† thanh to√°n ƒë∆°n h√†ng
5. **ƒê∆°n h√†ng** (/orders): Theo d√µi l·ªãch s·ª≠ mua h√†ng v√† tr·∫°ng th√°i ƒë∆°n

C√ÅCH TR·∫¢ L·ªúI:
- NG·∫ÆN G·ªåN, T·ªêI ƒêA 2-3 C√ÇU (kho·∫£ng 50-80 t·ª´)
- ƒêi th·∫≥ng v√†o v·∫•n ƒë·ªÅ, kh√¥ng d√†i d√≤ng
- Gi·∫£i th√≠ch c·ª• th·ªÉ, r√µ r√†ng
- S·ª≠ d·ª•ng emoji nh·∫π nh√†ng üêæ

SAU KHI TR·∫¢ L·ªúI: Th√™m d·∫•u ph√¢n c√°ch "---FOLLOW_UP---" v√† li·ªát k√™ 3-4 c√¢u h·ªèi g·ª£i √Ω li√™n quan ƒë·ªÉ ng∆∞·ªùi d√πng h·ªèi ti·∫øp (m·ªói c√¢u m·ªôt d√≤ng, kh√¥ng ƒë√°nh s·ªë).

V√≠ d·ª•:
ƒê·ªÉ th√™m th√∫ c∆∞ng, v√†o menu 'Th√∫ c∆∞ng c·ªßa t√¥i' ‚Üí b·∫•m 'Th√™m th√∫ c∆∞ng'. ƒêi·ªÅn t√™n, gi·ªëng, ng√†y sinh l√† xong! üê∂

---FOLLOW_UP---
L√†m sao ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin th√∫ c∆∞ng?
Marketplace c√≥ nh·ªØng s·∫£n ph·∫©m g√¨?
L√†m sao ƒë·ªÉ ƒë·∫∑t h√†ng?`
      : `B·∫°n l√† "Tay Nh·ªè" - tr·ª£ l√Ω AI chuy√™n nghi·ªáp c·ªßa Shoppet.

NHI·ªÜM V·ª§: T∆∞ v·∫•n s·ª©c kh·ªèe, dinh d∆∞·ª°ng v√† chƒÉm s√≥c th√∫ c∆∞ng.

C√ÅCH TR·∫¢ L·ªúI:
- NG·∫ÆN G·ªåN, T·ªêI ƒêA 3-4 C√ÇU (kho·∫£ng 60-100 t·ª´)
- ƒêi th·∫≥ng v√†o c√¢u tr·∫£ l·ªùi, kh√¥ng d√†i d√≤ng
- H·ªèi th√¥ng tin c·∫ßn thi·∫øt: lo√†i, tu·ªïi, c√¢n n·∫∑ng (n·∫øu ch∆∞a c√≥)
- N·∫øu kh·∫©n c·∫•p (kh√≥ th·ªü, ch·∫£y m√°u, co gi·∫≠t, kh√¥ng ƒÉn >24h): B·∫ÆT BU·ªòC khuy√™n ƒë·∫øn b√°c sƒ© th√∫ y NGAY

SAU KHI TR·∫¢ L·ªúI: Th√™m d·∫•u ph√¢n c√°ch "---FOLLOW_UP---" v√† li·ªát k√™ 3-4 c√¢u h·ªèi g·ª£i √Ω li√™n quan ƒë·ªÉ ng∆∞·ªùi d√πng h·ªèi ti·∫øp (m·ªói c√¢u m·ªôt d√≤ng, kh√¥ng ƒë√°nh s·ªë).

V√≠ d·ª•:
Ch√≥ b·ªã ti√™u ch·∫£y c√≥ th·ªÉ do ƒÉn nh·∫ßm ho·∫∑c nhi·ªÖm khu·∫©n. Nh·ªãn ƒÉn 12h, cho u·ªëng n∆∞·ªõc nhi·ªÅu. N·∫øu ti√™u ch·∫£y >24h ho·∫∑c c√≥ m√°u, ƒë·∫øn b√°c sƒ© ngay! Ch√≥ b·∫°n bao nhi√™u th√°ng tu·ªïi?

---FOLLOW_UP---
K√®m theo ti√™u ch·∫£y c√≥ n√¥n √≥i kh√¥ng?
Th√∫ c∆∞ng c√≥ b·ªè ƒÉn kh√¥ng?
C√≥ d·∫•u hi·ªáu s·ªët kh√¥ng?
ƒê√£ cho thu·ªëc g√¨ ch∆∞a?

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, s√∫c t√≠ch v√† chuy√™n nghi·ªáp.`;

    const response = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${LOVABLE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [
          { 
            role: "system", 
            content: systemPrompt
          },
          ...messages,
        ],
        stream: true,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("AI gateway error:", response.status, errorText);
      
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ error: "Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau." }),
          { status: 429, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      if (response.status === 402) {
        return new Response(
          JSON.stringify({ error: "D·ªãch v·ª• AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng." }),
          { status: 402, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      
      throw new Error(`AI gateway error: ${response.status}`);
    }

    console.log("Streaming AI response");
    return new Response(response.body, {
      headers: { ...corsHeaders, "Content-Type": "text/event-stream" },
    });
  } catch (e) {
    console.error("chat-ai error:", e);
    return new Response(
      JSON.stringify({ error: e instanceof Error ? e.message : "Unknown error" }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
